<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.xionghui.microservice.base.mapper.IEmployeeMapper">
	<resultMap id="baseResultMap"
		type="com.github.xionghui.microservice.base.bean.domain.EmployeeDomain">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="uuid" property="uuid" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="age" property="age" jdbcType="INTEGER" />
		<result column="sex" property="sex" jdbcType="BOOLEAN" />
		<result column="note" property="note" jdbcType="LONGVARCHAR" />
		<result column="version" property="version" jdbcType="INTEGER" />
		<result column="creator" property="creator" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="updater" property="updater" jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
	</resultMap>

	<insert id="insert" useGeneratedKeys="true" keyColumn="id">
		insert into microservice_base_employee
		(
		uuid,name,age,sex,note,creator,create_time
		)
		values
		(
		#{uuid},#{name},#{age},#{sex},#{note},#{creator},#{createTime}
		)
	</insert>

	<update id="update">
		update microservice_base_employee set 
		version=version+1,updater=#{updater},update_time=#{updateTime},
		name=#{name},age=#{age},sex=#{sex},note=#{note}
		<where>
			ds=0 and uuid=#{uuid} and version=#{version}
		</where>
	</update>

	<update id="delete">
		update microservice_base_employee set ds=1
		<where>
			ds=0 and uuid=#{uuid} and version=#{version}
		</where>
	</update>

	<sql id="origin_column_list">
		uuid,name,age,sex,note,version
	</sql>

	<select id="queryOrigin" flushCache="true" resultMap="baseResultMap"
		resultType="java.util.List">
		select
		<include refid="origin_column_list" />
		from microservice_base_employee
		<where>
			ds=0 and uuid=#{uuid}
		</where>
	</select>

	<update id="batchDelete">
		update microservice_base_employee set ds=1
		<where>
			ds=0 and uuid in
			<foreach collection="list" item="domain" separator=","
					 open="(" close=")" index="">
				#{domain.uuid}
			</foreach>
		</where>
	</update>

	<select id="queryOriginList" flushCache="true" resultMap="baseResultMap"
		resultType="java.util.List">
		select
		<include refid="origin_column_list" />
		from microservice_base_employee
		<where>
			uuid in
			<foreach collection="list" item="domain" separator=","
					 open="(" close=")" index="">
				#{domain.uuid}
			</foreach>
		</where>
	</select>

	<sql id="query_column_list">
		uuid,name,age,sex,note
	</sql>

	<select id="query" flushCache="true" resultMap="baseResultMap"
		resultType="java.util.List">
		select
		<include refid="query_column_list" />
		from microservice_base_employee
		<where>
			ds=0
			<if test="_parameter != null">
				and name like #{name}
			</if>
		</where>
	</select>

	<select id="countEmployeeName" flushCache="true" resultType="java.lang.Integer">
		select count(distinct uuid)
		from microservice_base_employee
		<where>
			ds=0 and name=#{0}
		</where>
	</select>
	
	<select id="queryEmployeeNames" flushCache="true" resultType="java.lang.String">
		select distinct name
		from microservice_base_employee
		<where>
			ds=0
		</where>
	</select>
</mapper>
